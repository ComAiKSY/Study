# TensorFlow 라이브러리 임포트 (딥러닝 프레임워크)
import tensorflow as tf

# 앞에서 정의한 다층 퍼셉트론(MLP) 클래스 임포트
from MLP import MLP

# ==========================================================
# 🔁 XOR 문제 해결용 실행 함수
# - MLP를 이용해 비선형 논리 문제(XOR)를 학습/예측함
# ==========================================================
def xor_classifier_example():
    # ------------------------------------------
    # 1. XOR 입력 데이터 정의
    # - 총 4가지 조합: [0,0], [0,1], [1,0], [1,1]
    # ------------------------------------------
    input_data = tf.constant([
        [0.0, 0.0],  # 0 XOR 0 = 0
        [0.0, 1.0],  # 0 XOR 1 = 1
        [1.0, 0.0],  # 1 XOR 0 = 1
        [1.0, 1.0]   # 1 XOR 1 = 0
    ])
    input_data = tf.cast(input_data, tf.float32)  # float32 타입으로 명시 변환

    # ------------------------------------------
    # 2. XOR 정답 라벨 정의
    # - 각 입력 조합에 대한 XOR 결과 (정답값)
    # ------------------------------------------
    xor_labels = tf.constant([0.0, 1.0, 1.0, 0.0])  # 정답: [0, 1, 1, 0]
    xor_labels = tf.cast(xor_labels, tf.float32)   # float32로 명시 변환

    # ------------------------------------------
    # 3. 학습 파라미터 설정
    # - 배치 크기: 1 → SGD 스타일
    # - 에폭 수: 1500번 반복 학습
    # ------------------------------------------
    batch_size = 1
    epochs = 1500

    # ------------------------------------------
    # 4. MLP 모델 구성
    # - 은닉층 1개 (노드 4개), 출력층 1개
    # - 입력층은 자동으로 2개 노드로 설정됨 (input_shape=[2,])
    # ------------------------------------------
    mlp_classifier = MLP(hidden_layer_conf=[4], num_output_nodes=1)
    mlp_classifier.build_model()

    # ✅ 구조 요약:
    # 입력층 (2) → 은닉층 (4, sigmoid) → 출력층 (1, sigmoid)

    # ------------------------------------------
    # 5. 학습 수행
    # - 입력과 정답을 기반으로 에폭 수만큼 반복 학습
    # ------------------------------------------
    mlp_classifier.fit(
        x=input_data,
        y=xor_labels,
        batch_size=batch_size,
        epochs=epochs
    )

    # ------------------------------------------
    # 6. 예측 수행
    # - 학습된 MLP 모델로 XOR 결과 예측
    # ------------------------------------------
    prediction = mlp_classifier.predict(x=input_data, batch_size=batch_size)

    # 입력과 예측 결과 묶기 (시각적으로 보기 좋게 출력)
    input_and_result = zip(input_data, prediction)

    # ------------------------------------------
    # 7. 예측 결과 출력
    # - 0.5 기준으로 이진 분류 판단 (sigmoid 출력 사용)
    # ------------------------------------------
    print("============= MLP XOR Classifier result ============")
    for x, y in input_and_result:
        if y > 0.5:
            # 예측 확률이 0.5 초과 → 1로 판단
            print("%d XOR %d => %.2f => 1" % (x[0], x[1], y.item()))
        else:
            # 예측 확률이 0.5 이하 → 0으로 판단
            print("%d XOR %d => %.2f => 0" % (x[0], x[1], y.item()))

# ==========================================================
# Entry Point: 스크립트가 직접 실행될 때만 함수 호출
# ==========================================================
if __name__ == '__main__':
    xor_classifier_example()
